from typing import Callable

import strawberry
from django.apps import apps
from django.db.models import Model
from django.http import HttpResponse
from strawberry.django.views import AsyncGraphQLView
from strawberry_django.optimizer import DjangoOptimizerExtension

from djangoProject.services.strawberry_model_mapper import StrawberryModelMapper


class AsyncAutoGraphQLView:
    """Class for automatic GraphQL schema generation based on Django models"""

    mappings = StrawberryModelMapper

    @classmethod
    def as_view(cls) -> Callable[..., HttpResponse]:
        # map all models to types
        for mapping_type in (
            cls.mappings.enum.Orders,
            cls.mappings.enum.Filters,
            cls.mappings.enum.Types,
        ):
            for model in cls._get_app_models():
                cls.mappings.set_strawberry_type(model, mapping_type)

        # generate query
        type_dict = {
            type_name: strawberry.django.field(graphql_type=list[graphql_type])
            for type_name, graphql_type in cls.mappings.get_graphql_types().items()
        }

        return AsyncGraphQLView.as_view(
            schema=strawberry.Schema(
                query=strawberry.type()(type("AutoGeneratedQuery", (), type_dict)),
                extensions=[DjangoOptimizerExtension],
            )
        )

    @staticmethod
    def _get_app_models() -> list[type[Model]]:
        """Get all Django models from all apps except django.contrib"""

        app_models = []
        for app_config in apps.get_app_configs():
            if app_config.name.startswith("django.contrib"):
                continue

            app_models.extend(app_config.get_models())

        return app_models
